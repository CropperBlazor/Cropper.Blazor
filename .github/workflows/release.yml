name: Deploy to NuGet

# Run workflow on every push to the master branch
on:
  push:
    branches:
    - master
    
jobs:
  deploy-to-nuget:

    # use ubuntu-latest image to run steps on
    runs-on: ubuntu-latest
    steps:

    # uses GitHub's checkout action to checkout code form the master branch
    - uses: actions/checkout@v3
    
    # sets up .NET Core SDK 7, 6
    - name: Setup .NET 7, 6
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
            6.0.x
            7.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: src/Cropper.Blazor
      
    - name: Build
      run: dotnet build -c Release --no-restore
      working-directory: src/Cropper.Blazor
      
    - name: Test
      run: dotnet test -c Release --no-build --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:ExcludeByAttribute='ExcludeFromCodeCoverage' /p:SkipAutoProps=true /p:Exclude="[*]Cropper.Blazor.Testing.*"
      working-directory: src/Cropper.Blazor/Cropper.Blazor.UnitTests    

    - name: Pack package
      run: dotnet pack -c Release
      working-directory: src/Cropper.Blazor/Cropper.Blazor

    - name: Push to NuGet Gallery
      run: dotnet nuget push bin/Release/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key ${{secrets.NUGET_API_KEY}} --skip-duplicate
      working-directory: src/Cropper.Blazor/Cropper.Blazor

    - name: Install Versionize
      run: dotnet tool install --global Versionize

    - name: Setup git
      run: |
        git config --local user.email ${{ secrets.RELEASE_EMAIL }}
        git config --local user.name ${{ secrets.RELEASE_NAME }}

    - name: Versionize Release
      id: versionize
      run: versionize --changelog-all --skip-dirty
      continue-on-error: true

    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."

    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true

    - name: "Create release"
      if: steps.versionize.outcome == 'success'
      uses: "actions/github-script@v5"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + "?per_page=1"
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
              changelog : {
                title: "Changelog",
                body: "This is the changelog"
              }
            });
          } catch (error) {
            core.setFailed(error.message);
          }

    - name: Add NuGet repository source
      run: dotnet nuget add source --username CropperBlazor --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/CropperBlazor/index.json"

    - name: Publish NuGet package to GitHub packages
      run: dotnet nuget push bin/Release/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "github" --skip-duplicate
      working-directory: src/Cropper.Blazor/Cropper.Blazor
