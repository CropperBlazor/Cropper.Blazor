@using System.Reflection;
@using Cropper.Blazor.Client.Components.Docs
@using System.Text.RegularExpressions
@using System.Web
@using Cropper.Blazor.Client.Extensions;
@using Cropper.Blazor.Client.Models;
@using Microsoft.Extensions.DependencyInjection
@using System.Globalization
@using MudBlazor;
@using Cropper.Blazor.Shared.Extensions;

<DocsPage>
    <link rel="canonical" Href="@ApiLink.GetComponentLinkFor(Type)" />
    <DocsPageSection api-link-section>
        <SectionHeader Title="Pages" />
        <div class="docs-page-apilinks">
            <ul class="my-2">
                <li>
                    <MudLink Class="disabled"
                             Href="#">
                        <CodeInline>@Type.GetTypeDisplayName()</CodeInline>
                    </MudLink>
                </li>
            </ul>
        </div>
    </DocsPageSection>
    <DocsPageContent>

        @{
            // save as lists to speed up displaying the page
            var properties = getProperties().ToList();
            var methods = getMethods().ToList();
            var eventCallbacks = getEventCallbacks().ToList();
        }

        @if (properties.Count() > 0)
        {
            <DocsPageSection>
                <SectionHeader Title="Properties" />
                <SectionContent Class="docs-content-api" Outlined="false">
                    @*                    <EnumSwitch T="Grouping" @bind-Value="@_propertiesGrouping" />*@
                    <MudTable Items="@properties" Elevation="0" Class="ma-0 mud-width-full" Breakpoint="@Breakpoint.Sm" GroupBy="@PropertiesGroupDefinition">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTd>Default</MudTd>
                            <MudTh>Description</MudTh>
                        </HeaderContent>
                        <GroupHeaderTemplate>
                            @if (_propertiesGrouping == Grouping.Inheritance && (Type)context.Key != Type)
                            {
                                <MudTh colspan="4">
                                    <MudText Typo="Typo.h6">@($"Inherited from {((Type)context.Key).GetTypeDisplayName()}")</MudText>
                                    </MudTh>
                            }
                            else if (_propertiesGrouping == Grouping.Categories)
                            {
                                <MudTh colspan="4">
                                    <MudText Typo="Typo.h6">@context.Key</MudText>
                                </MudTh>
                            }
                        </GroupHeaderTemplate>
                        <RowTemplate>
                            <MudTd Class="docs-content-api-cell" DataLabel="Name">
                                <CodeInline>@context.Name</CodeInline>
                                @if (_propertiesGrouping == Grouping.Inheritance && IsOverridden(context.PropertyInfo))
                                {
                                    <MudChip Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small">overridden</MudChip>
                                }
                            </MudTd>
                            <MudTd Class="docs-content-api-cell" DataLabel="Type">
                                <div style="display: inline-flex; flex-direction: row; align-items: center; white-space: nowrap;">
                                    <DocsTypeInfo Type="@context.Type" />
                                    @if (context.IsTwoWay)
                                    {
                                        <MudTooltip Text="Binding TwoWay" Placement="Placement.Top">
                                            <MudIcon Icon="@Icons.Material.Filled.SyncAlt" Color="Color.Default" Class="ml-2 mt-2" />
                                        </MudTooltip>
                                    }
                                </div>
                            </MudTd>
                            <MudTd Class="docs-content-api-cell" DataLabel="Default">
                                @{
                                    var def = PresentDefaultValue(context.Default);
                                }
                                @if (def.Contains("<path"))
                                {
                                    <MudIcon Icon="@def.Substring(1, def.Length - 1)" />
                                }
                                else
                                {
                                    @def
                                }
                            </MudTd>
                            <MudHidden Invert="true" Breakpoint="Breakpoint.SmAndDown">
                                <MudTd Class="docs-content-api-cell docs-content-api-description" Style="text-align: end !important;" DataLabel="Description">@(HttpUtility.HtmlDecode(context.Description))</MudTd>
                                </MudHidden>
                                <MudHidden Invert="true" Breakpoint="Breakpoint.MdAndUp">
                                    <MudTd Class="docs-content-api-cell docs-content-api-description" DataLabel="Description">@(HttpUtility.HtmlDecode(context.Description))</MudTd>
                                </MudHidden>
                            </RowTemplate>
                            <GroupFooterTemplate></GroupFooterTemplate>
                        </MudTable>
                    </SectionContent>
                </DocsPageSection>
        }

        @if (eventCallbacks.Count() > 0)
        {
            <DocsPageSection>
                <SectionHeader Title="EventCallbacks" />
                <SectionContent Class="docs-content-api" Outlined="false">
                    <MudTable Items="@eventCallbacks" Elevation="0" Class="ma-0 mud-width-full" Breakpoint="@Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Type</MudTh>
                            <MudTh>Description</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd Class="docs-content-api-cell" DataLabel="Name"><CodeInline>@context.Name</CodeInline></MudTd>
                            <MudTd Class="docs-content-api-cell" DataLabel="Type">@context.Type.GetTypeDisplayName()</MudTd>
                            <MudTd Class="docs-content-api-cell docs-content-api-description" DataLabel="Description">@(HttpUtility.HtmlDecode(context.Description))</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </SectionContent>
                </DocsPageSection>
        }

        @if (methods.Count() > 0)
        {
            <DocsPageSection>
                <SectionHeader Title="Methods" />
                <SectionContent Class="docs-content-api" Outlined="false">
                    <MudTable Items="@methods" FixedHeader="true" FixedFooter="false" Elevation="0" Class="ma-0 mud-width-full" Breakpoint="@Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh Class="docs-content-api-max-width">Name</MudTh>
                            <MudTd Class="docs-content-api-max-width">Parameters</MudTd>
                            <MudTh Class="docs-content-api-max-width">Return</MudTh>
                            <MudTh Class="docs-content-api-max-width">Description</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudHidden Invert="true" Breakpoint="Breakpoint.SmAndDown">
                                <MudTd Class="docs-content-api-cell docs-content-api-sm-max-width" DataLabel="Name"><CodeInline>@context.Signature</CodeInline></MudTd>
                                <MudTd Class="docs-content-api-cell docs-content-api-max-width" Style="word-wrap: break-word;" DataLabel="Parameters">
                                    @if (context.Parameters != null)
                                    {
                                        foreach (var parameterInfo in context.Parameters)
                                        {
                                            <div class="docs-content-api-sm-max-width">
                                                <div>@(new MarkupString($"<div style=\"font-weight: 700;\">{parameterInfo.ParameterType.GetTypeDisplayName()} {parameterInfo.Name}</div>{AnalyseMethodDocumentation(context.Documentation, "param", parameterInfo.Name)}"))</div>
                                            </div>
                                        }
                                    }
                                </MudTd>
                                <MudTd Class="docs-content-api-cell docs-content-api-sm-max-width" DataLabel="Return">
                                    @{
                                        string methodReturn = AnalyseMethodDocumentation(context.Documentation, "returns");
                                        if (!string.IsNullOrEmpty(methodReturn))
                                        {
                                            methodReturn = " — " + methodReturn;
                                        }
                                    }
                                    @if (@context.Return != null)
                                    {
                                        <div class="docs-content-api-sm-max-width">@(new MarkupString($"{context.Return.ParameterType.GetTypeDisplayName()}{methodReturn}"))</div>
                                    }
                                </MudTd>
                                <MudTd Class="docs-content-api-cell docs-content-api-desc-sm-max-width" DataLabel="Description">
                                    <div style="max-width: 400px; word-break: break-word; white-space: break-spaces;" class="docs-content-api-sm-max-width">@(new MarkupString(HttpUtility.HtmlDecode(AnalyseMethodDocumentation(context.Documentation, "summary"))))</div>
                                </MudTd>
                            </MudHidden>
                            <MudHidden Invert="true" Breakpoint="Breakpoint.MdAndUp">
                                <MudTd Class="docs-content-api-cell docs-content-api-max-width" DataLabel="Name"><CodeInline>@context.Signature</CodeInline></MudTd>
                                <MudTd Class="docs-content-api-cell docs-content-api-max-width" Style="word-wrap: break-word;" DataLabel="Parameters">
                                    @if (context.Parameters != null)
                                    {
                                        foreach (var parameterInfo in context.Parameters)
                                        {
                                            <div class="docs-row-flex">
                                                <div>@(new MarkupString($"<div style=\"font-weight: 700;\">{parameterInfo.ParameterType.GetTypeDisplayName()} {parameterInfo.Name}</div>{AnalyseMethodDocumentation(context.Documentation, "param", parameterInfo.Name)}"))</div>
                                                <div style="height: 10px;"></div>
                                            </div>
                                        }
                                    }
                                </MudTd>
                                <MudTd Class="docs-content-api-cell docs-content-return-api-max-width" DataLabel="Return">
                                    @{
                                        string methodReturn = AnalyseMethodDocumentation(context.Documentation, "returns");
                                        if (!string.IsNullOrEmpty(methodReturn))
                                        {
                                            methodReturn = " — " + methodReturn;
                                        }
                                    }
                                    @if (@context.Return != null)
                                    {
                                        <div>@(new MarkupString($"{context.Return.ParameterType.GetTypeDisplayName()}{methodReturn}"))</div>
                                    }
                                </MudTd>
                                <MudTd Class="docs-content-api-cell docs-content-description-api-max-width" DataLabel="Description">@(new MarkupString(HttpUtility.HtmlDecode(AnalyseMethodDocumentation(context.Documentation, "summary"))))</MudTd>
                                </MudHidden>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[]{10, 20, 50}" />
                            </PagerContent>
                        </MudTable>
                    </SectionContent>
                </DocsPageSection>
        }
    </DocsPageContent>
</DocsPage>

<div style="display: none;">
    @RenderTheType()
</div>

@code {
    private List<string> hiddenMethods = new List<string>()
    {
        "ToString",
        "GetType",
        "GetHashCode",
        "Equals",
        "SetParametersAsync",
        "ReferenceEquals"
    };
    [Parameter] public Type Type { get; set; }

    private IEnumerable<ApiProperty> getEventCallbacks()
    {
        string saveTypename = DocStrings.GetSaveTypename(Type);

        foreach (var info in Type.GetPropertyInfosWithAttribute<ParameterAttribute>().OrderBy(x => x.Name))
        {
            if (info.GetCustomAttributes(typeof(System.ObsoleteAttribute), true).Length == 0
                && (info.PropertyType.Name.Contains("EventCallback") || info.PropertyType.Name.Contains("Action") || info.PropertyType.Name.Contains("Func")))
            {
                yield return new ApiProperty()
                    {
                        Name = info.Name,
                        PropertyInfo = info,
                        Default = string.Empty,
                        Description = DocStrings.GetMemberDescription(saveTypename, info),
                        IsTwoWay = CheckIsTwoWayEventCallback(info),
                        Type = info.PropertyType,
                    };
            }
        }
    }

    private IEnumerable<ApiMethod> getMethods()
    {
        string saveTypename = DocStrings.GetSaveTypename(Type);

        foreach (var info in Type.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.Static).OrderBy(x => x.Name))
        {
            if (!hiddenMethods.Any(x => x.Contains(info.Name)) && !info.Name.StartsWith("get_") && !info.Name.StartsWith("set_"))
            {
                if (info.GetCustomAttributes(typeof(System.ObsoleteAttribute), true).Length == 0)
                {
                    yield return new ApiMethod()
                        {
                            MethodInfo = info,
                            Return = info.ReturnParameter,
                            Signature = info.GetSignature(),
                            Parameters = info.GetParameters(),
                            Documentation = DocStrings.GetMemberDescription(saveTypename, info)
                        };
                }
            }
        }
    }

    private IEnumerable<ApiProperty> getProperties()
    {
        string saveTypename = DocStrings.GetSaveTypename(Type);

        foreach (var info in Type.GetPropertyInfosWithAttribute<ParameterAttribute>()
                                 .OrderBy(x => _propertiesGrouping switch
                                 {
                                     Grouping.Categories => x.GetCustomAttribute<CategoryAttribute>()?.Order ?? int.MaxValue - 1,
                                     Grouping.Inheritance => -NumberOfAncestorClasses(BaseDefinitionClass(x)),
                                     _ => 0
                                 })
                                 .ThenBy(x => x.Name))
        {
            if (info.GetCustomAttributes(typeof(System.ObsoleteAttribute), true).Length == 0 && !(info.PropertyType.Name.Contains("EventCallback") || info.PropertyType.Name.Contains("Action") || info.PropertyType.Name.Contains("Func")))
            {
                yield return new ApiProperty
                    {
                        Name = info.Name,
                        PropertyInfo = info,
                        Default = GetDefaultValue(info),
                        IsTwoWay = CheckIsTwoWayProperty(info),
                        Description = DocStrings.GetMemberDescription(saveTypename, info),
                        Type = info.PropertyType
                    };
            }
        }
    }

    private string AnalyseMethodDocumentation(string documentation, string occurrence, string parameter = "")
    {
        try
        {
            // Define local variable
            string doublequotes = @"""";

            // Define the start tag and the end tag
            string endTag = $"</{occurrence}>";
            string startTag = $"<{occurrence}{(parameter == string.Empty ? "" : " name=" + doublequotes + parameter + doublequotes)}>";

            // Check if the documentation is valid and contains the start tag
            if (documentation != null && documentation.Contains(startTag))
            {
                // Remove the beginning of the documentation until the start tag
                documentation = documentation.Substring(documentation.IndexOf(startTag), documentation.Length - documentation.IndexOf(startTag));

                // Check if the documentation contains the end tag
                if (documentation.Contains(endTag))
                {
                    // Return the extracted information
                    // If the information is not for summary, ' : ' is only added if there is a non-empty information to be returned
                    return ((occurrence != "summary" && documentation.Substring(startTag.Length, documentation.IndexOf(endTag) - startTag.Length).Trim() != "" ? "" : "") +
                        documentation.Substring(startTag.Length, documentation.IndexOf(endTag) - startTag.Length).Trim())
                        .Replace("&gt;", ">")
                        .Replace("&lt;", "<");
                }
            }
        }
        catch
        {
            // ignored
        }

        return string.Empty;
    }

    private bool CheckIsTwoWayEventCallback(PropertyInfo propertyInfo) => propertyInfo.Name.EndsWith("Changed") ? true : false;

    private bool CheckIsTwoWayProperty(PropertyInfo propertyInfo)
    {
        PropertyInfo eventCallbackInfo = Type.GetProperty(propertyInfo.Name + "Changed");

        return eventCallbackInfo != null &&
               eventCallbackInfo.PropertyType.Name.Contains("EventCallback") &&
               eventCallbackInfo.GetCustomAttribute<ParameterAttribute>() != null &&
               eventCallbackInfo.GetCustomAttribute<ObsoleteAttribute>() == null;
    }

    // used for default value getting
    object _comp_instance;

    RenderFragment RenderTheType()
    {
        if (!Type.IsAssignableTo(typeof(IComponent)))
            return null;
        return new RenderFragment(builder =>
        {
            builder.OpenComponent(0, Type);
            builder.AddComponentReferenceCapture(1, inst => { _comp_instance = inst; });
            builder.CloseComponent();
        });
    }

    private object GetDefaultValue(PropertyInfo info)
    {
        try
        {
            if (_comp_instance == null)
            {
                return null;
                //RenderTheType();
            }
            return info.GetValue(_comp_instance);
        }
        catch (Exception) { }
        return null;
    }

    DefaultConverter<object> _converter = new DefaultConverter<object>() { Culture= CultureInfo.InvariantCulture };

    private string PresentDefaultValue(object @default)
    {
        if (@default == null)
            return "null";
        if (@default.GetType() == typeof(string))
        {
            if (@default.ToString() == string.Empty)
            {
                return "";
            }
            else
            {
                return $"\"{@default}\"";
            }
        }
        if (@default.GetType().IsEnum)
            return $"{@default.GetType().Name}.{@default}";
        if (Nullable.GetUnderlyingType(@default.GetType())!=null)
            return _converter.Set(@default);
        if (@default.GetType().IsGenericType) // for instance event callbacks
            return "";
        if (@default.GetType().IsValueType)
            return _converter.Set(@default);
        return "";
    }


    #region Grouping properties

    private enum Grouping { Categories, Inheritance, None }

    private Grouping _propertiesGrouping = Grouping.None;

    private TableGroupDefinition<ApiProperty> PropertiesGroupDefinition => _propertiesGrouping switch
    {
        Grouping.Categories => new() { Selector = (p) => p.PropertyInfo.GetCustomAttribute<CategoryAttribute>()?.Name ?? "Misc" },
        Grouping.Inheritance => new() { Selector = (p) => BaseDefinitionClass(p.PropertyInfo) },
        _ => null
    };

    // -- Grouping properties by inheritance ------------------------------------------------------------------------------------------

    private static Type BaseDefinitionClass(MethodInfo m) => m.GetBaseDefinition().DeclaringType;

    private static Type BaseDefinitionClass(PropertyInfo p) => BaseDefinitionClass(p.GetMethod ?? p.SetMethod);  // used for grouping properties

    private static bool IsOverridden(MethodInfo m) => m.GetBaseDefinition().DeclaringType != m.DeclaringType;

    private static bool IsOverridden(PropertyInfo p) => IsOverridden(p.GetMethod ?? p.SetMethod);                // used for the "overridden" chip

    // used for ordering groups of properties
    private static int NumberOfAncestorClasses(Type type)
    {
        int n = 0;
        while ((type = type.BaseType) != null)
            n++;
        return n;
    }

    #endregion
}