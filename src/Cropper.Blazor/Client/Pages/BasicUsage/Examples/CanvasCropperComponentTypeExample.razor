@using Cropper.Blazor.Models

<div class="cropper-canvas-container">
    <CropperComponent @ref="cropperComponent"
                      IsErrorLoadImage="@IsErrorLoadImage"
                      ErrorLoadImageSrc="images/error300px.png"
                      ErrorLoadImageClass="error-image"
                      CropperComponentType="CropperComponentType.Canvas"
                      InputAttributes="@InputAttributes"
                      Options="options" />
</div>

@if (!IsErrorLoadImage)
{
    <div class="button" @onclick="SetError">
        Set Error
    </div>
}

<style>
    .cropper-canvas-container {
        max-height: 300px;
        width: 100%;
        /* These styles below are just needed for a nice button and don't related with cropper component */
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .error-image {
        filter: grayscale(100%);
    }

    /* These styles are just needed for a nice button and don't related with cropper component */
    .button {
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        text-align: center;
        text-decoration: none;
        font-size: 16px;
        cursor: pointer;
    }
</style>

@code {
    [Inject] private IJSRuntime? JSRuntime { get; set; }

    private CropperComponent? cropperComponent = null!;
    private Options options;
    private bool IsErrorLoadImage { get; set; } = false;

    public Dictionary<string, object> InputAttributes { get; set; } = new Dictionary<string, object>
    {
        { "id", "canvas-cropper" }
    };

    protected override void OnInitialized()
    {
        options = new Options
        {

        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // When using CropperComponentType.Canvas, the canvas element is used directly
            // instead of an <img> tag. This requires manually drawing or uploading an image
            // into the <canvas> element via JavaScript or library. Error handling (e.g., for failed image
            // loading) is also your responsibility in this case.
            // This approach is ideal when you’re building a drawing, painting, or image editing
            // tool where you need full control over the canvas content.
            ElementReference? canvasElementReference = cropperComponent!.GetCropperElementReference();

            // Example: Fill the canvas with random colors using JavaScript
            await JSRuntime!.InvokeVoidAsync(
                "fillCanvasWithRandomColors",
                canvasElementReference);

            // Initialize the cropper component after the canvas is ready
            cropperComponent.InitCropper();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void SetError()
    {
        // You can use 'ErrorLoadImageContent' instead of 'ErrorLoadImageSrc', 'ErrorLoadImageClass'
        // parameters in cropper component to set up custom error image content
        IsErrorLoadImage = true;
        cropperComponent!.Destroy();
    }
}
