@using Cropper.Blazor.Extensions;
@using Cropper.Blazor.Models;
@using Cropper.Blazor.Exceptions;

<div class="img-container">
    <CropperComponent Class="big-img" Src="images/budir-church-bu-akirkja-iceland.jpg" @ref="cropperComponent" Options="new Blazor.Models.Options()" />
</div>

<div class="button" @onclick="GetCroppedCanvasDataInBackgroundAsync">
    Get cropped image in background
</div>

<img class="cropped-img-container" src="@croppedCanvasDataURL" />

@* Make sure the size of the image fits perfectly into the container *@
<style>
    .big-img {
        max-height: 400px;
        /* This rule is very important, please don't ignore this */
        max-width: 100%;
    }

    .img-container {
        max-height: 400px;
        width: 100%;
    }

    /* Means that the cropped image will take up 100% of the width of its containing element */
    .cropped-img-container {
        width: 100%;
    }

    /* These styles are just needed for a nice button and don't related with cropper component */
    .button {
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        text-align: center;
        text-decoration: none;
        font-size: 16px;
        cursor: pointer;
    }
</style>

@code {
    private CropperComponent? cropperComponent = null!;
    private string croppedCanvasDataURL;


    public async Task GetCroppedCanvasDataInBackgroundAsync()
    {
        // Define options for the cropped canvas, including size and image quality
        GetCroppedCanvasOptions getCroppedCanvasOptions = new GetCroppedCanvasOptions
        {
            MaxHeight = 4096,
            MaxWidth = 4096,
            ImageSmoothingQuality = ImageSmoothingQuality.High.ToEnumString()
        };

        // Call the cropper component to get the cropped canvas image
        ImageReceiver imageReceiver = await cropperComponent!.GetCroppedCanvasDataInBackgroundAsync(getCroppedCanvasOptions);

        try
        {
            // Retrieve the image stream from the receiver
            using MemoryStream croppedCanvasDataStream = await imageReceiver.GetImageChunkStreamAsync();

            // Convert the stream to a byte array
            byte[] croppedCanvasData = croppedCanvasDataStream.ToArray();

            // Encode the image data as a base64 data URL for use in HTML
            croppedCanvasDataURL = "data:image/png;base64," + Convert.ToBase64String(croppedCanvasData);
        }
        catch (ImageProcessingException ex)
        {
            // Handle any image processing errors (currently empty - consider logging or rethrowing)
        }
    }
}
