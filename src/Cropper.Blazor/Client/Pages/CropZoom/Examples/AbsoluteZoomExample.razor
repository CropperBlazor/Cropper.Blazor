@using Cropper.Blazor.Models;
@using Cropper.Blazor.Events;
@using Cropper.Blazor.Events.ZoomEvent;
@using Cropper.Blazor.Events.CropReadyEvent;

<MudGrid>
    <MudItem xs="12" sm="8" md="8" lg="8">
        <MudPaper Class="pa-2">
            <div class="img-container">
                <CropperComponent Class="big-img" @ref="cropperComponent" Src="images/dolphin.jpg"
                                  Options="cropperOptions" OnZoomEvent="OnZoomEvent" OnReadyEvent="OnCropReadyEvent" />
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4" md="4" lg="4">
        <MudPaper Class="pa-2">
            <MudNumericField Class="mb-2" @bind-Value="ZoomRatio" Label="Zoom Ratio"
                             Format="N4" Variant="Variant.Text" Step=".1M" Min="0" />
            <MudNumericField Class="mb-2" @bind-Value="PivotX" Label="PivotX"
                             Format="N4" Variant="Variant.Text" Step=".1M" />
            <MudNumericField Class="mb-2" @bind-Value="PivotY" Label="PivotY"
                             Format="N4" Variant="Variant.Text" Step=".1M" />

            <MudNumericField Class="mb-2" @bind-Value="OldRatio" Label="Old Ratio" Format="N4"
                             Variant="Variant.Text" HideSpinButtons="true" ReadOnly="true" />
            <MudNumericField Class="mb-2" @bind-Value="CurrentRatio" Label="Current Ratio" Format="N4"
                             Variant="Variant.Text" HideSpinButtons="true" ReadOnly="true" />
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private CropperComponent? cropperComponent = null!;

    // Setting up initial dimensions of crop area
    private Options cropperOptions = new Options
        {
            AspectRatio = 1m,
            ViewMode = ViewMode.Vm0
        };

    decimal _zoomRatio;
    decimal _pivotX;
    decimal _pivotY;

    public async void OnCropReadyEvent(JSEventData<CropReadyEvent> jSEventData)
    {
        await InvokeAsync(async () =>
        {
            ImageData imageData = await cropperComponent!.GetImageDataAsync();
            decimal initZoomRatio = imageData.Width / imageData.NaturalWidth;
            OldRatio = initZoomRatio;

            ContainerData containerData = await cropperComponent!.GetContainerDataAsync();
            // Zoom to 50% from the center of the container.
            PivotX = containerData.Width / 2;
            PivotY = containerData.Height / 2;
            ZoomRatio = 0.5m;
            StateHasChanged();
        });
    }

    private decimal ZoomRatio
    {
        get => _zoomRatio;
        set
        {
            _zoomRatio = value;
            cropperComponent?.ZoomTo(value, PivotX, PivotY);
        }
    }

    private decimal PivotX
    {
        get => _pivotX;
        set
        {
            _pivotX = value;
            cropperComponent?.ZoomTo(ZoomRatio, value, PivotY);
        }
    }


    private decimal PivotY
    {
        get => _pivotY;
        set
        {
            _pivotY = value;
            cropperComponent?.ZoomTo(ZoomRatio, PivotX, value);
        }
    }

    private decimal? OldRatio { get; set; }

    private decimal? CurrentRatio { get; set; }

    public async void OnZoomEvent(JSEventData<ZoomEvent> zoomJSEvent)
    {
        await InvokeAsync(() =>
        {
            if (zoomJSEvent.Detail is not null)
            {
                OldRatio = zoomJSEvent.Detail.OldRatio;
                CurrentRatio = zoomJSEvent.Detail.Ratio;
                StateHasChanged();
            }
        });
    }
}

<style>
    .big-img {
        max-height: 400px;
        /* This rule is very important, please don't ignore this */
        max-width: 100%;
    }

    .img-container {
        max-height: 400px;
        max-width: 100%;
    }
</style>
